{"version":3,"sources":["Graph.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["colors","Graph","data","width","height","title","textColor","yLabel","xLabel","showErrors","xTicks","maxX","reduce","max","d","x","push","standalone","crossAxis","theme","VictoryTheme","material","scale","padding","top","right","bottom","left","containerComponent","y","text","style","fill","fontFamily","fontSize","fontWeight","orientation","gutter","border","stroke","labels","map","index","name","symbol","color","length","itemsPerRow","label","tickValues","axis","grid","axisLabel","tickLabels","dependentAxis","bgColor","SET_RESULT_TEXT","SET_DATA","REMOVE_LINE","SET_STATE","reducer","state","action","type","resultText","lines","lineName","cells","lineCells","filter","_","i","headers","n","forEach","Main","useState","showTable","setShowTable","setLineName","setLineCells","graphs","setGraphs","setTitle","setShowErrors","errorMsg","setErrorMsg","useReducer","dispatch","useEffect","dataText","window","localStorage","getItem","JSON","parse","getTime","t","f","split","parseInt","console","log","margin","display","justifyContent","marginBottom","Typography","variant","Button","size","onClick","setItem","stringify","marginLeft","Alert","severity","onClose","Paper","backgroundColor","TextField","multiline","fullWidth","rows","value","onChange","e","target","InputLabelProps","shrink","inputProps","startsWith","row","r","col","Table","TableHead","TableRow","header","headerIndex","TableCell","TableBody","rowIndex","Object","values","colIndex","textAlign","newLineCells","substring","handleAddCell","marginTop","line","startIcon","alignItems","_graphs","graph","sum","errorsSum","cell","parseFloat","mean","std","Math","sqrt","Time","errorY","processLine","FormControlLabel","control","Checkbox","checked","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40fbf10b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { sprintf } from \"sprintf-js\";\n\nimport {\n    VictoryChart,\n    VictoryBar,\n    VictoryLine,\n    VictoryArea,\n    VictoryAxis,\n    VictoryTheme,\n    VictoryZoomContainer,\n    VictoryBrushContainer,\n    VictoryLegend,\n    VictoryLabel,\n    VictoryGroup,\n    VictoryTooltip,\n    VictoryVoronoiContainer,\n    VictoryScatter,\n    VictoryErrorBar,\n} from \"victory\";\n\nconst colors = [\n    \"#3366cc\",\n    \"#dc3912\",\n    \"#ff9900\",\n    \"#109618\",\n    \"#990099\",\n    \"#0099c6\",\n    \"#dd4477\",\n    \"#66aa00\",\n    \"#b82e2e\",\n    \"#316395\",\n    \"#994499\",\n    \"#22aa99\",\n    \"#aaaa11\",\n    \"#6633cc\",\n    \"#e67300\",\n    \"#8b0707\",\n    \"#651067\",\n    \"#329262\",\n    \"#5574a6\",\n    \"#3b3eac\",\n    \"#b77322\",\n    \"#16d620\",\n    \"#b91383\",\n    \"#f4359e\",\n    \"#9c5935\",\n    \"#a9c413\",\n    \"#2a778d\",\n    \"#668d1c\",\n    \"#bea413\",\n    \"#0c5922\",\n    \"#743411\",\n];\n\nconst Graph = ({\n    data,\n    width = 600,\n    height = 400,\n    title = \"graph\",\n    textColor = \"black\",\n    yLabel = \"Fluorescence\",\n    xLabel = \"Time [Hours]\",\n    showErrors,\n}) => {\n    const xTicks = [];\n\n    if (data[0]) {\n        const maxX = data[0].data.reduce((max, d) => {\n            if (d.x > max) {\n                return d.x;\n            } else {\n                return max;\n            }\n        }, 0);\n\n        for (let x = 0; x < maxX + 2; x += 5) {\n            xTicks.push(x);\n        }\n    }\n\n    return (\n        <div>\n            <VictoryChart\n                width={width}\n                height={height}\n                standalone={true}\n                crossAxis={false}\n                theme={VictoryTheme.material}\n                scale={{ x: \"linear\" }}\n                title={title}\n                padding={{ top: 50, right: 30, bottom: 60, left: 80 }}\n                containerComponent={<VictoryVoronoiContainer />}\n            >\n                <VictoryLabel\n                    x={25}\n                    y={24}\n                    text={title}\n                    style={{\n                        fill: textColor,\n                        fontFamily: \"inherit\",\n                        fontSize: \"16px\",\n                        fontWeight: \"bold\",\n                    }}\n                />\n\n                <VictoryLegend\n                    x={80}\n                    y={50}\n                    orientation=\"vertical\"\n                    gutter={20}\n                    style={{\n                        border: { stroke: textColor },\n                        title: { fontSize: 20 },\n                        labels: { fill: textColor },\n                    }}\n                    data={data.map((d, index) => ({\n                        name: d.name,\n                        symbol: { fill: d.color ? d.color : colors[index % colors.length] },\n                    }))}\n                    itemsPerRow={5}\n                />\n\n                {data.map((d, index) => (\n                    <VictoryLine\n                        key={d.name}\n                        data={d.data}\n                        style={{\n                            data: {\n                                stroke: d.color ? d.color : colors[index % colors.length],\n                            },\n                        }}\n                    />\n                ))}\n\n                {showErrors\n                    ? data.map((d, index) => (\n                          <VictoryErrorBar\n                              key={d.name}\n                              data={d.data}\n                              style={{\n                                  data: {\n                                      stroke: d.color\n                                          ? d.color\n                                          : colors[index % colors.length],\n                                  },\n                              }}\n                          />\n                      ))\n                    : null}\n\n                <VictoryAxis\n                    theme={VictoryTheme.material}\n                    label={xLabel}\n                    crossAxis={false}\n                    tickValues={xTicks}\n                    style={{\n                        axis: { stroke: textColor },\n                        grid: { stroke: \"gray\" },\n                        axisLabel: { padding: 30, fill: textColor },\n                        tickLabels: { fill: textColor },\n                    }}\n                />\n\n                <VictoryAxis\n                    dependentAxis\n                    crossAxis={false}\n                    label={yLabel}\n                    theme={VictoryTheme.material}\n                    style={{\n                        axis: { stroke: textColor },\n                        grid: { stroke: \"gray\" },\n                        axisLabel: { padding: 60, fill: textColor },\n                        tickLabels: { fill: textColor },\n                    }}\n                />\n            </VictoryChart>\n        </div>\n    );\n};\n\nexport default Graph;\n","import React, { useState, useEffect, useReducer } from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport RemoveIcon from \"@material-ui/icons/Close\";\n\nimport Graph from \"./Graph\";\n\nconst bgColor = \"#fff\";\n\nconst SET_RESULT_TEXT = \"SET_RESULT_TEXT\";\nconst SET_DATA = \"SET_DATA\";\nconst ADD_LINE = \"ADD_LINE\";\nconst REMOVE_LINE = \"REMOVE_LINE\";\nconst SET_STATE = \"SET_STATE\";\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_STATE:\n            return action.state;\n\n        case SET_RESULT_TEXT:\n            return { ...state, resultText: action.resultText };\n\n        case SET_DATA:\n            return { ...state, data: action.data };\n\n        case ADD_LINE:\n            return {\n                ...state,\n                lines: [...state.lines, { name: action.lineName, cells: action.lineCells }],\n            };\n\n        case REMOVE_LINE:\n            return {\n                ...state,\n                lines: [...state.lines.filter((_, i) => i !== action.index)],\n            };\n\n        default:\n            return state;\n    }\n};\n\nconst headers = [\"Time\", \"T\"];\nconst n = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nn.forEach((i) => headers.push(\"B\" + i));\nn.forEach((i) => headers.push(\"C\" + i));\nn.forEach((i) => headers.push(\"D\" + i));\nn.forEach((i) => headers.push(\"E\" + i));\nn.forEach((i) => headers.push(\"F\" + i));\nn.forEach((i) => headers.push(\"G\" + i));\n\nconst Main = () => {\n    const [showTable, setShowTable] = useState(false);\n    const [lineName, setLineName] = useState(\"\");\n    const [lineCells, setLineCells] = useState([]);\n    const [graphs, setGraphs] = useState([]);\n    const [title, setTitle] = useState(\"Title\");\n    const [showErrors, setShowErrors] = useState(true);\n    const [errorMsg, setErrorMsg] = useState(\"\");\n    const [state, dispatch] = useReducer(reducer, {\n        resultText: \"\",\n        data: [],\n        lines: [],\n    });\n\n    useEffect(() => {\n        const dataText = window.localStorage.getItem(\"data\");\n        if (dataText) {\n            const data = JSON.parse(dataText);\n            setTitle(data.title);\n            dispatch({ type: SET_STATE, state: data.state });\n        }\n    }, []);\n\n    const handleSave = () => {\n        const data = { title, state };\n\n        window.localStorage.setItem(\"data\", JSON.stringify(data));\n    };\n\n    const handleClear = () => {\n        window.localStorage.setItem(\"data\", \"\");\n        setTitle(\"\");\n        setLineName(\"\");\n        setLineCells(\"\");\n        setGraphs([]);\n        setErrorMsg(\"\");\n        dispatch({ type: SET_STATE, state: { resultText: \"\", data: [], lines: [] } });\n    };\n\n    const handleReadTable = () => {\n        if (state.resultText === \"\") {\n            setErrorMsg(\"Forgot to copy the result?\");\n            return;\n        }\n\n        const lines = state.resultText.split(\"\\n\");\n        if (!lines[0].startsWith(\"Time\")) {\n            setErrorMsg(\"The copied table should start with 'Time'\");\n            return;\n        }\n\n        const data = [];\n\n        for (let row = 1; row < lines.length; row++) {\n            if (lines[row] !== \"\" && lines[row].length > 10) {\n                const r = {};\n                const line = lines[row].split(\"\\t\");\n                line.forEach((value, col) => {\n                    r[headers[col]] = value;\n                });\n                data.push(r);\n            }\n        }\n\n        console.log(\"data\", data);\n\n        dispatch({ type: SET_DATA, data });\n    };\n\n    const handleAddLine = () => {\n        dispatch({ type: \"ADD_LINE\", lineName, lineCells });\n\n        setLineName(\"\");\n        setLineCells(\"\");\n    };\n\n    const handleAddCell = (row, col) => {\n        let newLineCells = \"\";\n        if (lineCells === \"\") {\n            newLineCells = row + col;\n        } else {\n            newLineCells = lineCells + \",\" + row + col;\n        }\n\n        if (newLineCells.startsWith(\",\")) {\n            newLineCells = newLineCells.substring(1);\n        }\n\n        setLineCells(newLineCells);\n    };\n\n    const getTime = (t) => {\n        // convert 1:42:01 to hours\n        const f = t.split(\":\");\n        const x = parseInt(f[0]) + parseInt(f[1]) / 60 + parseInt(f[2]) / 3600;\n\n        console.log(f, x);\n        return x;\n    };\n\n    const processLine = (line) => {\n        console.log(line);\n        const cells = line.cells.split(\",\").filter((x) => x !== \"\");\n\n        const graph = { name: line.name, data: [] };\n\n        state.data.forEach((d) => {\n            let sum = 0;\n            let errorsSum = 0;\n\n            cells.forEach((cell) => (sum += parseFloat(d[cell])));\n            const mean = sum / cells.length;\n\n            cells.forEach((cell) => {\n                const x = parseFloat(d[cell]);\n                errorsSum += (x - mean) * (x - mean);\n            });\n\n            const std = Math.sqrt(errorsSum / cells.length);\n\n            graph.data.push({ x: getTime(d.Time), y: mean, errorY: std });\n        });\n\n        //console.log(cells, state.data);\n        console.log(graph);\n\n        return graph;\n    };\n\n    const handleGenerateGraph = () => {\n        const _graphs = [];\n        state.lines.forEach((line) => {\n            const graph = processLine(line);\n            _graphs.push(graph);\n        });\n\n        setGraphs(_graphs);\n    };\n\n    return (\n        <div style={{ margin: 20 }}>\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    marginBottom: 8,\n                }}\n            >\n                <Typography variant=\"h6\">Anat's Graph</Typography>\n\n                <div>\n                    <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        onClick={handleClear}\n                    >\n                        Clear Data\n                    </Button>\n\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        onClick={handleSave}\n                        style={{ marginLeft: 16 }}\n                    >\n                        Save\n                    </Button>\n                </div>\n            </div>\n\n            {errorMsg ? (\n                <Alert variant=\"filled\" severity=\"warning\" onClose={() => setErrorMsg(\"\")}>\n                    {errorMsg}\n                </Alert>\n            ) : null}\n\n            <Paper style={{ padding: 20, marginBottom: 20, backgroundColor: bgColor }}>\n                <Typography>Step 1) Copy the result table including headers</Typography>\n\n                <pre>\n                    <TextField\n                        multiline\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        fullWidth\n                        label=\"Result Table\"\n                        rows={10}\n                        value={state.resultText}\n                        onChange={(e) =>\n                            dispatch({ type: SET_RESULT_TEXT, resultText: e.target.value })\n                        }\n                        InputLabelProps={{ shrink: true }}\n                        inputProps={{ style: { fontSize: 12 } }} // font size of input text\n                    />\n                </pre>\n\n                <div>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        onClick={handleReadTable}\n                    >\n                        Read Table\n                    </Button>\n\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        onClick={() => setShowTable(!showTable)}\n                        style={{ marginLeft: 16 }}\n                    >\n                        {showTable ? \"Hide Table\" : \"Show Table\"}\n                    </Button>\n                </div>\n\n                {showTable ? (\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                {headers.map((header, headerIndex) => (\n                                    <TableCell key={header}>{header}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {state.data.map((row, rowIndex) => (\n                                <TableRow key={rowIndex}>\n                                    {Object.values(row).map((col, colIndex) => (\n                                        <TableCell key={rowIndex + \".\" + colIndex}>\n                                            {col}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                ) : null}\n            </Paper>\n\n            <Paper style={{ padding: 20, marginBottom: 20, backgroundColor: bgColor }}>\n                <Typography>Step 2) Add Lines</Typography>\n                <br />\n\n                {[\" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"].map((row) => {\n                    if (row === \" \") {\n                        return (\n                            <div key={row} style={{ display: \"flex\" }}>\n                                <div style={{ width: 70, height: 40 }}>.</div>\n                                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((col) => (\n                                    <div\n                                        key={col}\n                                        style={{\n                                            width: 70,\n                                            height: 40,\n                                            textAlign: \"center\",\n                                        }}\n                                    >\n                                        {col}\n                                    </div>\n                                ))}\n                            </div>\n                        );\n                    } else {\n                        return (\n                            <div key={row} style={{ display: \"flex\" }}>\n                                <div style={{ width: 70, height: 40 }}>{row}</div>\n                                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((col) => (\n                                    <div key={col} style={{ width: 70, height: 40 }}>\n                                        {row !== \"A\" &&\n                                        row !== \"H\" &&\n                                        col !== 1 &&\n                                        col !== 12 ? (\n                                            <Button\n                                                variant=\"outlined\"\n                                                color=\"primary\"\n                                                onClick={() => handleAddCell(row, col)}\n                                            >\n                                                {row + col}\n                                            </Button>\n                                        ) : null}\n                                    </div>\n                                ))}\n                            </div>\n                        );\n                    }\n                })}\n\n                <div>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        label=\"Line Name\"\n                        value={lineName}\n                        onChange={(e) => setLineName(e.target.value)}\n                        InputLabelProps={{ shrink: true }}\n                    />\n\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        label=\"Line Cells\"\n                        value={lineCells}\n                        onChange={(e) => setLineCells(e.target.value)}\n                        InputLabelProps={{ shrink: true }}\n                        style={{ marginLeft: 16 }}\n                    />\n\n                    <Button\n                        variant=\"contained\"\n                        size=\"medium\"\n                        color=\"primary\"\n                        onClick={handleAddLine}\n                        style={{ marginLeft: 16, marginTop: 9 }}\n                    >\n                        Add Line\n                    </Button>\n                </div>\n\n                <br />\n                <Typography>Selected Lines:</Typography>\n                {state.lines.map((line, index) => (\n                    <div key={line.name} style={{ display: \"flex\" }}>\n                        <Typography style={{ width: 30 }}>{index + 1}</Typography>\n                        <Typography style={{ width: 200 }}>{line.name}</Typography>\n                        <Typography style={{ width: 200 }}>{line.cells}</Typography>\n                        <Button\n                            size=\"small\"\n                            color=\"secondary\"\n                            startIcon={<RemoveIcon />}\n                            onClick={() => dispatch({ type: REMOVE_LINE, index })}\n                        >\n                            Remove\n                        </Button>\n                    </div>\n                ))}\n            </Paper>\n\n            <Paper style={{ padding: 20, marginBottom: 20, backgroundColor: bgColor }}>\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <Typography>Step 3) </Typography>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        onClick={handleGenerateGraph}\n                        style={{ marginLeft: 16, marginTop: 9 }}\n                    >\n                        Generate Graph\n                    </Button>\n\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        label=\"Graph Title\"\n                        value={title}\n                        onChange={(e) => setTitle(e.target.value)}\n                        InputLabelProps={{ shrink: true }}\n                        style={{ marginLeft: 16 }}\n                    />\n\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={showErrors}\n                                onChange={() => setShowErrors(!showErrors)}\n                                color=\"primary\"\n                                style={{ marginLeft: 16 }}\n                            />\n                        }\n                        label=\"Show Errors\"\n                    />\n                </div>\n            </Paper>\n            <Paper style={{ padding: 20, marginBottom: 20, backgroundColor: bgColor }}>\n                <Graph data={graphs} title={title} showErrors={showErrors} />\n            </Paper>\n            <br />\n        </div>\n    );\n};\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./Main\";\n\nconst App = () => {\n    return (\n        <div>\n            <Main />\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}