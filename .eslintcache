[{"/Users/eran/anat/nodejs/anat-graph/src/index.js":"1","/Users/eran/anat/nodejs/anat-graph/src/App.js":"2","/Users/eran/anat/nodejs/anat-graph/src/reportWebVitals.js":"3","/Users/eran/anat/nodejs/anat-graph/src/Main.js":"4","/Users/eran/anat/nodejs/anat-graph/src/Graph.js":"5"},{"size":500,"mtime":1608990634116,"results":"6","hashOfConfig":"7"},{"size":169,"mtime":1608991104355,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1608990634117,"results":"9","hashOfConfig":"7"},{"size":14278,"mtime":1609007300607,"results":"10","hashOfConfig":"7"},{"size":4412,"mtime":1609005822249,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"5dxzn6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/eran/anat/nodejs/anat-graph/src/index.js",[],["25","26"],"/Users/eran/anat/nodejs/anat-graph/src/App.js",[],"/Users/eran/anat/nodejs/anat-graph/src/reportWebVitals.js",[],"/Users/eran/anat/nodejs/anat-graph/src/Main.js",["27"],"import React, { useState, useEffect, useReducer } from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport RemoveIcon from \"@material-ui/icons/Close\";\n\nimport Graph from \"./Graph\";\n\nconst SET_RESULT_TEXT = \"SET_RESULT_TEXT\";\nconst SET_DATA = \"SET_DATA\";\nconst ADD_LINE = \"ADD_LINE\";\nconst REMOVE_LINE = \"REMOVE_LINE\";\nconst SET_STATE = \"SET_STATE\";\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_STATE:\n            return action.state;\n\n        case SET_RESULT_TEXT:\n            return { ...state, resultText: action.resultText };\n\n        case SET_DATA:\n            return { ...state, data: action.data };\n\n        case ADD_LINE:\n            return {\n                ...state,\n                lines: [...state.lines, { name: action.lineName, cells: action.lineCells }],\n            };\n\n        case REMOVE_LINE:\n            return {\n                ...state,\n                lines: [...state.lines.filter((_, i) => i !== action.index)],\n            };\n\n        default:\n            return state;\n    }\n};\n\nconst headers = [\"Time\", \"T\"];\nconst n = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nn.forEach((i) => headers.push(\"B\" + i));\nn.forEach((i) => headers.push(\"C\" + i));\nn.forEach((i) => headers.push(\"D\" + i));\nn.forEach((i) => headers.push(\"E\" + i));\nn.forEach((i) => headers.push(\"F\" + i));\nn.forEach((i) => headers.push(\"G\" + i));\n\nconst Main = () => {\n    const [showTable, setShowTable] = useState(false);\n    const [lineName, setLineName] = useState(\"\");\n    const [lineCells, setLineCells] = useState([]);\n    const [graphs, setGraphs] = useState([]);\n    const [title, setTitle] = useState(\"Title\");\n    const [errorMsg, setErrorMsg] = useState(\"\");\n    const [state, dispatch] = useReducer(reducer, {\n        resultText: \"\",\n        data: [],\n        lines: [],\n    });\n\n    useEffect(() => {\n        const dataText = window.localStorage.getItem(\"data\");\n        if (dataText) {\n            const data = JSON.parse(dataText);\n            setTitle(data.title);\n            dispatch({ type: SET_STATE, state: data.state });\n        }\n    }, []);\n\n    const handleSave = () => {\n        const data = { title, state };\n\n        window.localStorage.setItem(\"data\", JSON.stringify(data));\n    };\n\n    const handleReadTable = () => {\n        if (state.resultText === \"\") {\n            setErrorMsg(\"Forgot to copy the result?\");\n            return;\n        }\n\n        const lines = state.resultText.split(\"\\n\");\n        if (!lines[0].startsWith(\"Time\")) {\n            setErrorMsg(\"The copied table should start with 'Time'\");\n            return;\n        }\n\n        const data = [];\n\n        for (let row = 1; row < lines.length; row++) {\n            const r = {};\n            const line = lines[row].split(\"\\t\");\n            line.forEach((value, col) => {\n                r[headers[col]] = value;\n            });\n            data.push(r);\n        }\n\n        console.log(\"data\", data);\n\n        dispatch({ type: SET_DATA, data });\n    };\n\n    const handleAddLine = () => {\n        dispatch({ type: \"ADD_LINE\", lineName, lineCells });\n\n        setLineName(\"\");\n        setLineCells(\"\");\n    };\n\n    const handleAddCell = (row, col) => {\n        if (lineCells === \"\") {\n            setLineCells(row + col);\n        } else {\n            setLineCells(lineCells + \",\" + row + col);\n        }\n    };\n\n    const getTime = (t) => {\n        // convert 1:42:01 to hours\n        const f = t.split(\":\");\n        const x = parseInt(f[0]) + parseInt(f[1]) / 60 + parseInt(f[2]) / 3600;\n\n        console.log(f, x);\n        return x;\n    };\n\n    const processLine = (line) => {\n        console.log(line);\n        const cells = line.cells.split(\",\").filter((x) => x !== \"\");\n\n        const graph = { name: line.name, data: [] };\n\n        state.data.forEach((d) => {\n            let sum = 0;\n            let errorsSum = 0;\n\n            cells.forEach((cell) => (sum += parseFloat(d[cell])));\n            const mean = sum / cells.length;\n\n            cells.forEach((cell) => {\n                const x = parseFloat(d[cell]);\n                errorsSum += (x - mean) * (x - mean);\n            });\n\n            const std = Math.sqrt(errorsSum / cells.length);\n\n            graph.data.push({ x: getTime(d.Time), y: mean, errorY: std });\n        });\n\n        //console.log(cells, state.data);\n        console.log(graph);\n\n        return graph;\n    };\n\n    const handleGenerateGraph = () => {\n        const _graphs = [];\n        state.lines.forEach((line) => {\n            const graph = processLine(line);\n            _graphs.push(graph);\n        });\n\n        setGraphs(_graphs);\n    };\n\n    return (\n        <div style={{ margin: 20 }}>\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    marginBottom: 8,\n                }}\n            >\n                <Typography variant=\"h6\">Anat's Graph</Typography>\n                <Button\n                    variant=\"contained\"\n                    size=\"small\"\n                    color=\"secondary\"\n                    onClick={handleSave}\n                >\n                    Save\n                </Button>\n            </div>\n\n            {errorMsg ? (\n                <Alert variant=\"filled\" severity=\"warning\" onClose={() => setErrorMsg(\"\")}>\n                    {errorMsg}\n                </Alert>\n            ) : null}\n\n            <Paper style={{ padding: 20, marginBottom: 20, backgroundColor: \"#ccc\" }}>\n                <Typography>Step 1) Copy the result table including headers</Typography>\n\n                <pre>\n                    <TextField\n                        multiline\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        fullWidth\n                        label=\"Result Table\"\n                        rows={10}\n                        value={state.resultText}\n                        onChange={(e) =>\n                            dispatch({ type: SET_RESULT_TEXT, resultText: e.target.value })\n                        }\n                        InputLabelProps={{ shrink: true }}\n                        inputProps={{ style: { fontSize: 12 } }} // font size of input text\n                    />\n                </pre>\n\n                <div>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"primary\"\n                        onClick={handleReadTable}\n                    >\n                        Read Table\n                    </Button>\n\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        onClick={() => setShowTable(!showTable)}\n                        style={{ marginLeft: 16 }}\n                    >\n                        {showTable ? \"Hide Table\" : \"Show Table\"}\n                    </Button>\n                </div>\n\n                {showTable ? (\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                {headers.map((header, headerIndex) => (\n                                    <TableCell key={header}>{header}</TableCell>\n                                ))}\n                            </TableRow>\n                            <TableBody>\n                                {state.data.map((row, rowIndex) => (\n                                    <TableRow key={rowIndex}>\n                                        {Object.values(row).map((col, colIndex) => (\n                                            <TableCell key={rowIndex + \".\" + colIndex}>\n                                                {col}\n                                            </TableCell>\n                                        ))}\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </TableHead>\n                    </Table>\n                ) : null}\n            </Paper>\n\n            <Paper style={{ padding: 20, marginBottom: 20, backgroundColor: \"#ccc\" }}>\n                <Typography>Step 2) Add Lines</Typography>\n                <br />\n\n                {[\" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"].map((row) => {\n                    if (row === \" \") {\n                        return (\n                            <div key={row} style={{ display: \"flex\" }}>\n                                <div style={{ width: 70, height: 40 }}>.</div>\n                                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((col) => (\n                                    <div\n                                        key={col}\n                                        style={{\n                                            width: 70,\n                                            height: 40,\n                                            textAlign: \"center\",\n                                        }}\n                                    >\n                                        {col}\n                                    </div>\n                                ))}\n                            </div>\n                        );\n                    } else {\n                        return (\n                            <div key={row} style={{ display: \"flex\" }}>\n                                <div style={{ width: 70, height: 40 }}>{row}</div>\n                                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((col) => (\n                                    <div key={col} style={{ width: 70, height: 40 }}>\n                                        {row !== \"A\" &&\n                                        row !== \"H\" &&\n                                        col !== 1 &&\n                                        col !== 12 ? (\n                                            <Button\n                                                variant=\"outlined\"\n                                                color=\"primary\"\n                                                onClick={() => handleAddCell(row, col)}\n                                            >\n                                                {row + col}\n                                            </Button>\n                                        ) : null}\n                                    </div>\n                                ))}\n                            </div>\n                        );\n                    }\n                })}\n\n                <div>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        label=\"Line Name\"\n                        value={lineName}\n                        onChange={(e) => setLineName(e.target.value)}\n                        InputLabelProps={{ shrink: true }}\n                    />\n\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        label=\"Line Cells\"\n                        value={lineCells}\n                        onChange={(e) => setLineCells(e.target.value)}\n                        InputLabelProps={{ shrink: true }}\n                        style={{ marginLeft: 16 }}\n                    />\n\n                    <Button\n                        variant=\"contained\"\n                        size=\"medium\"\n                        color=\"primary\"\n                        onClick={handleAddLine}\n                        style={{ marginLeft: 16, marginTop: 9 }}\n                    >\n                        Add Line\n                    </Button>\n                </div>\n\n                <br />\n                <Typography>Selected Lines:</Typography>\n                {state.lines.map((line, index) => (\n                    <div key={line.name} style={{ display: \"flex\" }}>\n                        <Typography style={{ width: 30 }}>{index + 1}</Typography>\n                        <Typography style={{ width: 200 }}>{line.name}</Typography>\n                        <Typography style={{ width: 200 }}>{line.cells}</Typography>\n                        <Button\n                            size=\"small\"\n                            color=\"secondary\"\n                            startIcon={<RemoveIcon />}\n                            onClick={() => dispatch({ type: REMOVE_LINE, index })}\n                        >\n                            Remove\n                        </Button>\n                    </div>\n                ))}\n            </Paper>\n\n            <Paper style={{ padding: 20, marginBottom: 20, backgroundColor: \"#ccc\" }}>\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <Typography>Step 3) </Typography>\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        color=\"secondary\"\n                        onClick={handleGenerateGraph}\n                        style={{ marginLeft: 16, marginTop: 9 }}\n                    >\n                        Generate Graph\n                    </Button>\n\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        label=\"Graph Title\"\n                        value={title}\n                        onChange={(e) => setTitle(e.target.value)}\n                        InputLabelProps={{ shrink: true }}\n                        style={{ marginLeft: 16 }}\n                    />\n                </div>\n            </Paper>\n            <Paper style={{ padding: 20, marginBottom: 20, backgroundColor: \"#ccc\" }}>\n                <Graph data={graphs} title={title} />\n            </Paper>\n            <br />\n        </div>\n    );\n};\n\nexport default Main;\n","/Users/eran/anat/nodejs/anat-graph/src/Graph.js",["28","29","30","31","32","33","34","35"],"import React from \"react\";\n\nimport { sprintf } from \"sprintf-js\";\n\nimport {\n    VictoryChart,\n    VictoryBar,\n    VictoryLine,\n    VictoryArea,\n    VictoryAxis,\n    VictoryTheme,\n    VictoryZoomContainer,\n    VictoryBrushContainer,\n    VictoryLegend,\n    VictoryLabel,\n    VictoryGroup,\n    VictoryTooltip,\n    VictoryVoronoiContainer,\n    VictoryScatter,\n    VictoryErrorBar,\n} from \"victory\";\n\nconst colors = [\n    \"#3366cc\",\n    \"#dc3912\",\n    \"#ff9900\",\n    \"#109618\",\n    \"#990099\",\n    \"#0099c6\",\n    \"#dd4477\",\n    \"#66aa00\",\n    \"#b82e2e\",\n    \"#316395\",\n    \"#994499\",\n    \"#22aa99\",\n    \"#aaaa11\",\n    \"#6633cc\",\n    \"#e67300\",\n    \"#8b0707\",\n    \"#651067\",\n    \"#329262\",\n    \"#5574a6\",\n    \"#3b3eac\",\n    \"#b77322\",\n    \"#16d620\",\n    \"#b91383\",\n    \"#f4359e\",\n    \"#9c5935\",\n    \"#a9c413\",\n    \"#2a778d\",\n    \"#668d1c\",\n    \"#bea413\",\n    \"#0c5922\",\n    \"#743411\",\n];\n\nconst Graph = ({\n    data,\n    width = 600,\n    height = 400,\n    title = \"graph\",\n    textColor = \"black\",\n    yLabel = \"Fluorescence\",\n    xLabel = \"Time [Hours]\",\n}) => {\n    return (\n        <div>\n            <VictoryChart\n                width={width}\n                height={height}\n                standalone={true}\n                crossAxis={false}\n                theme={VictoryTheme.material}\n                scale={{ x: \"linear\" }}\n                title={title}\n                padding={{ top: 50, right: 30, bottom: 60, left: 80 }}\n                containerComponent={<VictoryVoronoiContainer />}\n            >\n                <VictoryLabel\n                    x={25}\n                    y={24}\n                    text={title}\n                    style={{\n                        fill: textColor,\n                        fontFamily: \"inherit\",\n                        fontSize: \"16px\",\n                        fontWeight: \"bold\",\n                    }}\n                />\n\n                <VictoryLegend\n                    x={80}\n                    y={50}\n                    orientation=\"vertical\"\n                    gutter={20}\n                    style={{\n                        border: { stroke: textColor },\n                        title: { fontSize: 20 },\n                        labels: { fill: textColor },\n                    }}\n                    data={data.map((d, index) => ({\n                        name: d.name,\n                        symbol: { fill: d.color ? d.color : colors[index % colors.length] },\n                    }))}\n                    itemsPerRow={5}\n                />\n\n                {data.map((d, index) => (\n                    <VictoryLine\n                        key={d.name}\n                        data={d.data}\n                        style={{\n                            data: {\n                                stroke: d.color ? d.color : colors[index % colors.length],\n                            },\n                        }}\n                    />\n                ))}\n\n                {data.map((d, index) => (\n                    <VictoryErrorBar\n                        key={d.name}\n                        data={d.data}\n                        style={{\n                            data: {\n                                stroke: d.color ? d.color : colors[index % colors.length],\n                            },\n                        }}\n                    />\n                ))}\n\n                <VictoryAxis\n                    theme={VictoryTheme.material}\n                    label={xLabel}\n                    crossAxis={false}\n                    tickValues={[0, 5, 10, 15, 20, 25, 30, 35, 40]}\n                    style={{\n                        axis: { stroke: textColor },\n                        grid: { stroke: \"gray\" },\n                        axisLabel: { padding: 30, fill: textColor },\n                        tickLabels: { fill: textColor },\n                    }}\n                />\n\n                <VictoryAxis\n                    dependentAxis\n                    crossAxis={false}\n                    label={yLabel}\n                    theme={VictoryTheme.material}\n                    style={{\n                        axis: { stroke: textColor },\n                        grid: { stroke: \"gray\" },\n                        axisLabel: { padding: 60, fill: textColor },\n                        tickLabels: { fill: textColor },\n                    }}\n                />\n            </VictoryChart>\n        </div>\n    );\n};\n\nexport default Graph;\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":12,"column":8,"nodeType":"42","messageId":"43","endLine":12,"endColumn":22},{"ruleId":"40","severity":1,"message":"44","line":3,"column":10,"nodeType":"42","messageId":"43","endLine":3,"endColumn":17},{"ruleId":"40","severity":1,"message":"45","line":7,"column":5,"nodeType":"42","messageId":"43","endLine":7,"endColumn":15},{"ruleId":"40","severity":1,"message":"46","line":9,"column":5,"nodeType":"42","messageId":"43","endLine":9,"endColumn":16},{"ruleId":"40","severity":1,"message":"47","line":12,"column":5,"nodeType":"42","messageId":"43","endLine":12,"endColumn":25},{"ruleId":"40","severity":1,"message":"48","line":13,"column":5,"nodeType":"42","messageId":"43","endLine":13,"endColumn":26},{"ruleId":"40","severity":1,"message":"49","line":16,"column":5,"nodeType":"42","messageId":"43","endLine":16,"endColumn":17},{"ruleId":"40","severity":1,"message":"50","line":17,"column":5,"nodeType":"42","messageId":"43","endLine":17,"endColumn":19},{"ruleId":"40","severity":1,"message":"51","line":19,"column":5,"nodeType":"42","messageId":"43","endLine":19,"endColumn":19},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'TableContainer' is defined but never used.","Identifier","unusedVar","'sprintf' is defined but never used.","'VictoryBar' is defined but never used.","'VictoryArea' is defined but never used.","'VictoryZoomContainer' is defined but never used.","'VictoryBrushContainer' is defined but never used.","'VictoryGroup' is defined but never used.","'VictoryTooltip' is defined but never used.","'VictoryScatter' is defined but never used.","no-global-assign","no-unsafe-negation"]